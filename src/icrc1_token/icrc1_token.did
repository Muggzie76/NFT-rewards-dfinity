type Account = record {
    owner: principal;
    subaccount: opt blob;
};

type TransferArg = record {
    to: Account;
    fee: opt nat64;
    memo: opt blob;
    from_subaccount: opt blob;
    created_at_time: opt nat64;
    amount: nat64;
};

type TransferResult = variant {
    Ok: nat64;
    Err: record {
        GenericError: record { message: text; error_code: nat64 };
        TemporarilyUnavailable;
        BadBurn: record { min_burn_amount: nat64 };
        Duplicate: record { duplicate_of: nat64 };
        BadFee: record { expected_fee: nat64 };
        CreatedInFuture: record { ledger_time: nat64 };
        TooOld;
        InsufficientFunds: record { balance: nat64 };
    };
};

type InitArgs = record {
    name: text;
    symbol: text;
    decimals: nat8;
    fee: nat64;
    minting_account: opt Account;
    initial_balance: nat64;
    min_burn_amount: nat64;
};

service : {
    "icrc1_name": () -> (text) query;
    "icrc1_symbol": () -> (text) query;
    "icrc1_decimals": () -> (nat8) query;
    "icrc1_fee": () -> (nat64) query;
    "icrc1_metadata": () -> (vec record { text; value }) query;
    "icrc1_total_supply": () -> (nat64) query;
    "icrc1_minting_account": () -> (opt Account) query;
    "icrc1_balance_of": (Account) -> (nat64) query;
    "icrc1_transfer": (TransferArg) -> (TransferResult);
    "icrc1_supported_standards": () -> (vec record { name: text; url: text }) query;
} 