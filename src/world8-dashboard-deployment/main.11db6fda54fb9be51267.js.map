{"version":3,"file":"main.11db6fda54fb9be51267.js","mappings":"oRAIA,MAMaA,EAAc,CAEzB,CAAEC,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,IAAKC,SAAU,EAAGC,YAAa,IAAKC,qBAAqB,GACrJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,GAAIC,SAAU,EAAGC,YAAa,GAAIC,qBAAqB,GACnJ,CAAEJ,UAAW,kEAAmEC,WAAY,EAAGC,SAAU,EAAGC,YAAa,EAAGC,qBAAqB,GACjJ,CAAEJ,UAAW,kEAAmEC,WAAY,IAAKC,SAAU,EAAGC,YAAa,IAAKC,qBAAqB,GACrJ,CAAEJ,UAAW,kEAAmEC,WAAY,IAAKC,SAAU,KAAMC,YAAa,KAAMC,qBAAqB,IAmD9IC,EAAkBA,KAC7B,MAAMC,EAhDmBC,KACzB,MAAMC,EAAmB,IAAbC,KAAKD,MAGjB,OAAOD,EAAQG,KAAIC,IACjB,MAAMC,EAAWD,EAAOR,YAGlBU,EAvCQ,IAqCKD,EApCH,GAqCkC,IApC7B,GAwCfE,EAAiBN,EAAMO,KAAKC,MATrB,OAS2BD,KAAKE,SAAoB,GAEjE,MAAO,CACLjB,UAAWW,EAAOX,UAClBkB,MAAO,CACLC,iBAAkBL,EAClBM,UAAWC,OAAOT,GAClBU,mBAAoBD,OAAON,KAAKC,MAAMH,IACtCU,uBAAwBF,OAAON,KAAKC,MAAMH,GAAmB,EAAoB,GAAhBE,KAAKE,aAEzE,GACD,EA0BgBO,CAAkBzB,GAC9B0B,EAvBqBlB,KAC3B,MAAMC,EAAmB,IAAbC,KAAKD,MAMXK,EAhEU,IA6DEN,EAAQmB,QAAO,CAACC,EAAKhB,IAAWgB,EAAMhB,EAAOR,aAAa,GA5D1D,GA8DgC,IA7D3B,GAgEvB,MAAO,CACLgB,iBAAkBX,EAAO,QACzBoB,wBAAyBP,OAAO,IAChCQ,oBAAqBR,OAAON,KAAKC,MAAwB,GAAlBH,IACvCiB,uBAAwBT,OAAOd,EAAQwB,QACvCC,iBAAkBxB,EAAO,QACzByB,eAAe,EACfC,iBAAkBb,OAAO,GAC1B,EAMmBc,CAAoBpC,GAExC,MAAO,CACLqC,mBAAoBC,SACX/B,EAAUI,KAAI4B,GAAQ,CAC3B,CAAEC,OAAQA,IAAMD,EAAKtC,WACrBsC,EAAKpB,SAGTsB,UAAWH,SAAYZ,EACvBgB,eAAgBJ,UACd,MAAMC,EAAOhC,EAAUoC,MAAKC,GAAKA,EAAE3C,YAAcA,EAAUuC,WAC3D,OAAOD,EAAOA,EAAKpB,MAAQ,IAAI,EAEjC0B,eAAgBP,YAChBQ,SAAUR,YACX,EC9FGS,EAAUC,kBAAYC,mBAAqB,kBAC3CC,EAAsBC,SAASH,kBAAYI,gCAAkC,IAyGtEC,GAnGOC,MAClB,MAAMC,EAAQ,IAAIC,EAAAA,GAAU,CAC1BC,KAAMV,EACNW,aAAc,CACZC,QAAST,KAKb,IAAIU,EAAkB,EACtB,MAEMC,EAAoBN,EAAMO,UAChCP,EAAMO,UAAYxB,UAChB,MACMyB,EADMrD,KAAKD,MACkBmD,EAOnC,OALIG,EAPqB,WAQjB,IAAIC,SAAQC,GAAWC,WAAWD,EARjB,IAQ+CF,KAGxEH,EAAkBlD,KAAKD,MAChBoD,EAAoBA,EAAkBM,GAAWA,CAAO,CAGrD,EAGAb,GAuEmBD,KDRxB,CACLe,YAAa9B,UACX,MAAM1B,EAASZ,EAAY2C,MAAK0B,GAAKA,EAAEpE,YAAcA,EAAUuC,WAC/D,OAAO5B,EAASU,OAAOV,EAAOR,aAAekB,OAAO,EAAE,EAExDgD,WAAYhC,SAEHhB,OAAON,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,SC4BxCqD,EAAmBC,IAAQ,CACtC3D,SAAU4D,OAAOD,EAASnD,WAC1BqD,iBAAkBD,OAAOD,EAASjD,oBAAsB,IACxDR,eAAgB0D,OAAOD,EAASpD,kBAChCuD,qBAAsBF,OAAOD,EAAShD,wBAA0B,MCvI5DoD,EAAqBC,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6B/BC,EAASF,EAAAA,GAAOG,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCtBC,EAAQJ,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgDlBI,EAAgBL,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;;;;;;EAsB1BK,EAAeN,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;;;;;;;;;EAyBzBM,EAAiBP,EAAAA,GAAOC,GAAG;;;;;;;;EAU3BO,EAAiBR,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyD3BQ,EAAcT,EAAAA,GAAOC,GAAG;;;;;;;;;;;EAaxBS,EAASV,EAAAA,GAAOW,MAAM;;;;;;;;;;EAYtBC,GAAmBZ,EAAAA,EAAAA,IAAOI,EAAM;;;;;;;;;;;;;;;;;;;;EAuBhCS,EAAiBA,KACrB,MAAMC,GAAUC,EAAAA,EAAAA,UAQhB,OANAC,EAAAA,EAAAA,IAAS,KACHF,EAAQG,UACVH,EAAQG,QAAQC,SAASC,GAAK,KAChC,IAIAC,EAAAA,cAAA,QAAMC,IAAKP,GACTM,EAAAA,cAAA,kBAAgBE,KAAM,CAAC,EAAG,GAAI,MAC9BF,EAAAA,cAAA,wBACEG,MAAM,UACNC,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,QAAS,GACTC,aAAa,IAEV,EAKLC,EAAQA,IAEVT,EAAAA,cAACU,EAAAA,GAAM,CAACC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,KACjCZ,EAAAA,cAAA,gBAAca,UAAW,KACzBb,EAAAA,cAAA,cAAYY,SAAU,CAAC,GAAI,GAAI,IAAKC,UAAW,IAAKV,MAAM,YAC1DH,EAAAA,cAAA,cAAYY,SAAU,EAAE,IAAK,IAAK,IAAKC,UAAW,GAAKV,MAAM,YAC7DH,EAAAA,cAACP,EAAc,MACfO,EAAAA,cAACc,EAAAA,EAAa,CACZC,YAAY,EACZC,YAAa,EACbC,YAAa,EACbC,YAAU,EACVC,gBAAiB,MA6WzB,EAvWkBC,KAChB,MAAOlG,EAAOmG,IAAYC,EAAAA,EAAAA,UAAS,CACjCC,YAAa,EACbC,aAAc,EACdC,cAAe,EACfC,aAAc,EACd5G,eAAgB,EAChB6G,eAAgB,EAChBC,cAAc,KAGTC,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAAYC,IAAiBV,EAAAA,EAAAA,UAAS,KACtCW,EAAkBC,IAAuBZ,EAAAA,EAAAA,UAAS,KAClDa,EAASC,IAAcd,EAAAA,EAAAA,WAAS,IAChCe,EAAOC,IAAYhB,EAAAA,EAAAA,UAAS,OAC5BiB,EAAYC,IAAiBlB,EAAAA,EAAAA,UAAS,OACtCmB,EAAWC,IAAgBpB,EAAAA,EAAAA,UAAS,CAAEqB,MAAO,KAAMC,QAAS,QAC5DC,EAAiBC,IAAsBxB,EAAAA,EAAAA,WAAS,GACjDyB,EACW,MADXA,EAEe,QAFfA,EAGY,QAHZA,EAIY,OAJZA,EAKY,QALZA,EAMS,OAGfC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAmB5G,UACvB,IACE+F,GAAW,GACX,MAAMc,EDrQH7I,ICsQG8I,EAAc/F,IAGd3B,QAAoByH,EAAY1G,YAChC4G,GDxOc7E,ECwOe9C,EDxOP,CAClC8F,YAAa/C,OAAOD,EAASzC,wBAC7B0F,aAAchD,OAAOD,EAAS1C,qBAAuB,IACrDf,eAAgB0D,OAAOD,EAASpD,kBAChCwG,eAAgBnD,OAAOD,EAASvC,kBAChCqH,sBAAuB7E,OAAOD,EAAS3C,yBACvC0H,gBAAiB9E,OAAOD,EAASrC,kBACjC0F,aAAcrD,EAAStC,gBCoOXsH,QAAqBL,EAAY9G,qBACjCoH,QAAuBzF,QAAQ0F,IACnCF,EAAa7I,KAAI2B,UAA8B,IAAtBrC,EAAWkB,GAAMwI,EACxC,MAAM9I,QAAiBuI,EAAYhF,YAAYnE,GAC/C,MAAO,CACLA,UAAWA,EAAUuC,YAClB+B,EAAgBpD,GACnByI,YAAanF,OAAO5D,GACrB,KAKCgJ,EAAeC,EAAsBL,GAC3CtB,EAAoB0B,GAGpB,MAAME,EAAgBN,EACnBO,MAAK,CAACC,EAAGC,IAAMA,EAAEN,YAAcK,EAAEL,cACjCO,MAAM,EAAG,GACTxJ,KAAI,CAACyJ,EAAQC,KAAU,CACtBC,KAAMD,EAAQ,EACdE,QAAS,GAAGH,EAAOnK,UAAUkK,MAAM,EAAG,QAAQC,EAAOnK,UAAUkK,OAAO,KACtEK,OAAQJ,EAAOR,YACfa,YAAcL,EAAOzF,qBAAuByF,EAAOR,YAAe,KAAKc,QAAQ,GAAK,QAExFzC,EAAc8B,GAGd,MAAMY,EAAUC,EAAuBnB,GACvC1B,EAAkB4C,GAElBrD,EAAS,IACJ+B,EACH3B,cAAe+B,EAAezH,OAC9B2F,aAAc8B,EAAe9H,QAAO,CAACkJ,EAAKC,IAASD,EAAMC,EAAKlB,aAAa,GAAKH,EAAezH,SAGjGuG,EAAS,KACX,CAAE,MAAOwC,GACPC,QAAQ1C,MAAM,+BAAgCyC,GAC9CxC,EAAS,wDACX,CAAE,QACAF,GAAW,EACb,CDvRsB7D,KCuRtB,EAGIyG,EAAsBA,KAC1B,MAAMxK,EAAM,IAAIC,KACVwK,EAAO,IAAIxK,KAAKD,GAChB0K,EAAW,IAAIzK,KAAKD,GAK1B,OAHAyK,EAAKE,SAAS,GAAI,EAAG,EAAG,GACxBD,EAASC,SAAS,EAAG,EAAG,EAAG,GAEvB3K,EAAI4K,YAAc,IAEpBF,EAASG,QAAQH,EAASI,UAAY,GACtC9C,EAAc0C,GACPA,EAASK,UAAY/K,EAAI+K,WACvB/K,EAAI4K,YAAc,GAE3B5C,EAAcyC,GACPA,EAAKM,UAAY/K,EAAI+K,gBAHvB,CAIP,EAIIC,EAAkBA,KACtB,GAAIjD,EAAY,CACd,MAAM/H,EAAM,IAAIC,KACVgL,EAAOlD,EAAWgD,UAAY/K,EAAI+K,UAExC,GAAIE,EAAO,EAAG,CACZ,MAAM9C,EAAQ5H,KAAKC,MAAMyK,EAAO,MAC1B7C,EAAU7H,KAAKC,MAAOyK,EAAO,KAAgB,KAEnD/C,EAAa,CACXC,MAAOA,EAAM+C,WAAWC,SAAS,EAAG,KACpC/C,QAASA,EAAQ8C,WAAWC,SAAS,EAAG,MAE5C,CACF,GAIF1C,IACA,MAAM2C,EAAsBZ,IAC5BQ,IAGA,MAAMK,EAAoBC,YAAYN,EAAiB,KAGjDO,EAAe9H,YAAW,KAC9BgF,IACA+B,GAAqB,GACpBY,GAGH,MAAO,KACLI,aAAaD,GACbE,cAAcJ,EAAkB,CACjC,GACA,IAEH,MAAMhC,EAAyBvJ,GACd,CACb,CAAE4L,KAAM,YAAaC,IAAK,EAAGC,IAAK,IAClC,CAAEF,KAAM,aAAcC,IAAK,GAAIC,IAAK,IACpC,CAAEF,KAAM,cAAeC,IAAK,GAAIC,IAAK,KACrC,CAAEF,KAAM,YAAaC,IAAK,IAAKC,IAAKC,MAGxB3L,KAAI4L,IAChB,MAAMC,EAAQjM,EAAUkM,QAAOlK,GAC7BA,EAAKqH,aAAe2C,EAAMH,KAAO7J,EAAKqH,aAAe2C,EAAMF,MAC3DrK,OACF,MAAO,CACLmK,KAAMI,EAAMJ,KACZO,OAAQF,EAAQjM,EAAUyB,OAAS,KAAK0I,QAAQ,GACjD,IAICE,EAA0BrK,KAET,IAAIG,MAAOiM,WAEhC,MAHe,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAGrChM,KAAI,CAACiM,EAAOvC,KACxB,MACMqC,EAAQnM,EAAUoB,QAAO,CAACkJ,EAAKtI,IAASsI,EAAMtI,EAAKqH,aAAa,GACtE,MAAO,CACLgD,MAAO,GAAGA,MAAS,IAAIlM,MAAOmM,gBAC9BH,MAAOA,EACR,GACD,EAGJ,OACEzG,EAAAA,cAACrB,EAAkB,KACjBqB,EAAAA,cAAClB,EAAM,KACLkB,EAAAA,cAAA,UAAI,6BACJA,EAAAA,cAAA,WACEA,EAAAA,cAAA,YAAM,iBAAc,IAAIvF,MAAOoM,kBAC/B7G,EAAAA,cAAA,UACE8G,MAAO,CACLC,WAAY,OACZC,WAAY,yBACZ7G,MAAO,UACP8G,OAAQ,mCACRC,aAAc,MACdC,QAAS,WACTC,OAAQ,WAEVC,QAASA,IAAMvE,GAAoBD,IAElCA,EAAkB,oBAAsB,uBAK/C7C,EAAAA,cAAChB,EAAK,KACJgB,EAAAA,cAAA,UAAI,oBACJA,EAAAA,cAACd,EAAY,CAAC4H,MAAO,CAAElG,SAAU,SAAU/C,UAAW,SACnD3C,EAAMqG,YAAYsF,iBAAiB,SAEtC7G,EAAAA,cAAA,OAAK8G,MAAO,CAAEQ,UAAW,SACvBtH,EAAAA,cAAA,MAAI8G,MAAO,CAAE3G,MAAO,UAAWoH,aAAc,SAAU,eACvDvH,EAAAA,cAAA,OAAK8G,MAAO,CAAE3G,MAAO,0BACnBH,EAAAA,cAAA,WAAK,kBAAgB9E,EAAMsG,aAAaqF,iBAAiB,WACzD7G,EAAAA,cAAA,WAAK,mBAAiB9E,EAAMuG,cAAcoF,kBAC1C7G,EAAAA,cAAA,WAAK,kBAAgB9E,EAAMwG,aAAa+C,QAAQ,GAAG,YAKzDzE,EAAAA,cAACf,EAAa,KACZe,EAAAA,cAACX,EAAW,KAAC,8BACbW,EAAAA,cAACZ,EAAc,KACbY,EAAAA,cAAA,OAAKwH,UAAU,mBAAkB,kBACjCxH,EAAAA,cAAA,OAAKwH,UAAU,mBACbxH,EAAAA,cAAA,YAAOyC,EAAUE,OACjB3C,EAAAA,cAAA,QAAMwH,UAAU,aAAY,KAC5BxH,EAAAA,cAAA,YAAOyC,EAAUG,WAGrB5C,EAAAA,cAACb,EAAc,KACba,EAAAA,cAACS,EAAK,QAIVT,EAAAA,cAAChB,EAAK,KACJgB,EAAAA,cAAA,UAAI,mBACJA,EAAAA,cAAA,OAAK8G,MAAO,CAAEW,MAAO,OAAQC,OAAQ,UACnC1H,EAAAA,cAAC2H,EAAAA,EAAmB,CAACF,MAAM,OAAOC,OAAO,QACvC1H,EAAAA,cAAC4H,EAAAA,EAAS,CAACC,KAAMhG,GACf7B,EAAAA,cAAC8H,EAAAA,EAAa,CAACC,gBAAgB,MAAMC,OAAO,0BAC5ChI,EAAAA,cAACiI,EAAAA,EAAK,CAACC,QAAQ,QAAQF,OAAO,YAC9BhI,EAAAA,cAACmI,EAAAA,EAAK,CAACH,OAAO,YACdhI,EAAAA,cAACoI,EAAAA,EAAO,CACNC,aAAc,CACZrB,WAAY,oBACZC,OAAQ,oBACR9G,MAAO,aAGXH,EAAAA,cAACsI,EAAAA,EAAI,CACHC,KAAK,WACLL,QAAQ,QACRhC,KAAK,eACL8B,OAAO,UACPQ,YAAa,EACbC,IAAK,CAAEC,KAAM,iBAOvB1I,EAAAA,cAAChB,EAAK,KACJgB,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,OAAKwH,UAAU,mBAAmBV,MAAO,CAAE6B,UAAW,SACpD3I,EAAAA,cAAA,SAAO8G,MAAO,CAAEW,MAAO,OAAQtH,MAAO,0BACpCH,EAAAA,cAAA,aACEA,EAAAA,cAAA,MAAI8G,MAAO,CAAE3G,MAAO,YAClBH,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,UAAI,WACJA,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,UAAI,kBAGRA,EAAAA,cAAA,aACG+B,EAAWrH,KAAKyJ,GACfnE,EAAAA,cAAA,MAAI4I,IAAKzE,EAAOE,MACdrE,EAAAA,cAAA,UAAI,IAAEmE,EAAOE,MACbrE,EAAAA,cAAA,UAAKmE,EAAOG,SACZtE,EAAAA,cAAA,UAAKmE,EAAOI,OAAOsC,kBACnB7G,EAAAA,cAAA,UAAKmE,EAAOK,mBAQxBxE,EAAAA,cAAChB,EAAK,KACJgB,EAAAA,cAAA,UAAI,oBACJA,EAAAA,cAAA,OAAKwH,UAAU,mBAAmBV,MAAO,CAAE6B,UAAW,SACpD3I,EAAAA,cAAA,SAAO8G,MAAO,CAAEW,MAAO,OAAQtH,MAAO,0BACpCH,EAAAA,cAAA,aACEA,EAAAA,cAAA,MAAI8G,MAAO,CAAE3G,MAAO,YAClBH,EAAAA,cAAA,UAAI,SACJA,EAAAA,cAAA,UAAI,cACJA,EAAAA,cAAA,UAAI,aAGRA,EAAAA,cAAA,aACGiC,EAAiBvH,KAAI,CAACmO,EAAMzE,IAC3BpE,EAAAA,cAAA,MAAI4I,IAAKxE,GACPpE,EAAAA,cAAA,UAAK6I,EAAK3C,MACVlG,EAAAA,cAAA,UAAK6I,EAAKpC,MAAM,KAChBzG,EAAAA,cAAA,UAAKjF,KAAKC,MAAME,EAAMuG,eAAiBqH,WAAWD,EAAKpC,OAAS,cAQ3E5D,GACC7C,EAAAA,cAACR,EAAgB,CAACsH,MAAO,CAAEiC,WAAY,SAAUzB,UAAW,SAC1DtH,EAAAA,cAAA,UAAI,8BACJA,EAAAA,cAAA,OAAK8G,MAAO,CAAEkC,QAAS,OAAQC,oBAAqB,uCAAwCC,IAAK,SAC/FlJ,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAI,oBACJA,EAAAA,cAAA,OAAKwH,UAAU,iBACbxH,EAAAA,cAAA,YAAM,mBACNA,EAAAA,cAAA,QAAMwH,UAAU,aAAazE,IAE/B/C,EAAAA,cAAA,OAAKwH,UAAU,iBACbxH,EAAAA,cAAA,YAAM,uBACNA,EAAAA,cAAA,QAAMwH,UAAU,aAAazE,IAE/B/C,EAAAA,cAAA,OAAKwH,UAAU,iBACbxH,EAAAA,cAAA,YAAM,oBACNA,EAAAA,cAAA,QAAMwH,UAAU,aAAazE,KAIjC/C,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAI,uBACJA,EAAAA,cAAA,OAAKwH,UAAU,iBACbxH,EAAAA,cAAA,YAAM,+BACNA,EAAAA,cAAA,QAAMwH,UAAU,aAAazE,IAE/B/C,EAAAA,cAAA,OAAKwH,UAAU,iBACbxH,EAAAA,cAAA,YAAM,6BACNA,EAAAA,cAAA,QAAMwH,UAAU,aAAazE,IAE/B/C,EAAAA,cAAA,OAAKwH,UAAU,iBACbxH,EAAAA,cAAA,YAAM,yBACNA,EAAAA,cAAA,QAAMwH,UAAU,aAAazE,MAInC/C,EAAAA,cAAA,OAAK8G,MAAO,CAAEQ,UAAW,OAAQ6B,SAAU,QAAShJ,MAAO,6BAA8B,2FAM7FH,EAAAA,cAACV,EAAM,KAAC,gFAGW,ECnqBnB8J,EAAcC,EAAAA,EAAiB;;;;;;;;;;;;;;;;;;;;;;;;;EAoCrC,QATA,WACE,OACErJ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACoJ,EAAW,MACZpJ,EAAAA,cAACoB,EAAS,MAGhB,EClCMkI,EAAYC,SAASC,eAAe,SAC7BC,EAAAA,EAAAA,GAAWH,GACnBI,OACH1J,EAAAA,cAACA,EAAAA,WAAgB,KACfA,EAAAA,cAAC2J,EAAG,O","sources":["webpack://frontend-experimental/./src/utils/mockData.js","webpack://frontend-experimental/./src/utils/agent.js","webpack://frontend-experimental/./src/components/Dashboard.jsx","webpack://frontend-experimental/./src/App.jsx","webpack://frontend-experimental/./src/index.jsx"],"sourcesContent":["// Mock data provider based on the CSV data\nimport { Principal } from \"@dfinity/principal\";\n\n// Constants for calculation\nconst NFT_VALUE = 1000;\nconst APY_PERCENT = 10;\nconst PAYOUTS_PER_YEAR = 73;\n\n// Mock holder data from CSV\n// This would be loaded from the CSV files in a real implementation\nexport const holdersData = [\n  // A subset of data from combined_holders_no_duplicates.csv\n  { principal: \"nixkj-77c5e-q7qik-ewuhi-hp4gs-oggzq-fj2v5-62cdz-amjrc-pz2nz-oqe\", daku_count: 4, gg_count: 0, total_count: 4, already_in_canister: true },\n  { principal: \"kwte6-azsaw-mek5y-mkcya-4wkkp-fhb76-wzqtt-lwsxz-amgs4-h2wxy-eqe\", daku_count: 22, gg_count: 6, total_count: 28, already_in_canister: true },\n  { principal: \"f2nj3-jtefx-xy4b5-pdfia-he3lj-2nbja-h3d2d-syyro-4piss-5ivqe-sqe\", daku_count: 8, gg_count: 0, total_count: 8, already_in_canister: false },\n  { principal: \"ap2h3-mdvaz-br5tt-s5tst-nap6q-t6kuv-vlwla-a3xvj-f4a4w-4lonn-sqe\", daku_count: 2, gg_count: 0, total_count: 2, already_in_canister: false },\n  { principal: \"l4t4l-264ub-ysr3o-2lovb-md65r-p3mpa-kjk7a-hmmvt-ya7fh-ljoyg-cae\", daku_count: 4, gg_count: 0, total_count: 4, already_in_canister: false },\n  { principal: \"4bxu7-fuuct-otitq-emxde-emjvt-xl46f-scuz6-7yzvy-tlrbz-eeeap-oae\", daku_count: 2, gg_count: 0, total_count: 2, already_in_canister: false },\n  { principal: \"rym5r-a6mj7-wfv3g-lypjx-ejpxa-vvill-eq4nc-wvx2v-l2c47-jym4p-wqe\", daku_count: 2, gg_count: 0, total_count: 2, already_in_canister: false },\n  { principal: \"k3vnz-ukxjv-qvzaz-m6fpu-2sdpt-frpgc-o4rym-teurx-ri24u-clam5-uae\", daku_count: 1, gg_count: 0, total_count: 1, already_in_canister: false },\n  { principal: \"3rtwo-vaa53-j522q-p4v2o-pgxfx-fuv6e-3j4nb-xuo6h-jc6a7-dl5fm-3qe\", daku_count: 18, gg_count: 0, total_count: 18, already_in_canister: false },\n  { principal: \"4zfc6-pn6z2-h7sa2-ahazx-vbmo3-rppde-7x57p-wl723-vpfzm-7krxb-5ae\", daku_count: 6, gg_count: 0, total_count: 6, already_in_canister: false },\n  { principal: \"jt6pq-pfact-6nq4w-xpd7l-jvsh3-ghmvo-yp34h-pmon5-5dcjo-rygay-sqe\", daku_count: 100, gg_count: 0, total_count: 100, already_in_canister: true },\n  { principal: \"nhmua-clb6g-bwq4j-xncof-cst74-57pq6-mv342-iub2s-rs5ec-baibl-nae\", daku_count: 20, gg_count: 1, total_count: 21, already_in_canister: false },\n  { principal: \"va6r7-v33hl-qubvq-oeyfl-a2mbp-dz5s5-h4zgm-dnjnc-s5uyw-mofpn-jae\", daku_count: 19, gg_count: 1, total_count: 20, already_in_canister: false },\n  { principal: \"ybi4b-ho2w6-vmbuh-vlbtg-w2tmm-n2e5o-xfsdn-5i7gt-w4ehe-jrhfl-rae\", daku_count: 50, gg_count: 1, total_count: 51, already_in_canister: false },\n  { principal: \"23jeh-d4pjo-r2biy-e6hrf-tgo36-xqjrg-kkk5h-lmw7p-rch6o-rz2aa-xqe\", daku_count: 20, gg_count: 0, total_count: 20, already_in_canister: false },\n  { principal: \"vbw7f-vrvep-gncha-udzry-v736h-gsf7m-kqyob-hawfi-h2swu-k2vsg-wqe\", daku_count: 12, gg_count: 0, total_count: 12, already_in_canister: false },\n  { principal: \"v7emq-nwbuf-7bbyo-kxeho-zdiqo-xvbqe-ks6ri-7agso-od3kf-l5kdh-lqe\", daku_count: 32, gg_count: 1, total_count: 33, already_in_canister: false },\n  { principal: \"o3nat-3ix22-juqph-xdhyp-krhly-vqk3m-c243q-uxuov-vv4yj-3b4j7-mqe\", daku_count: 5, gg_count: 1, total_count: 6, already_in_canister: false },\n  { principal: \"e7wmz-tpnxb-nwuxd-vgqr6-wg65t-7c2b3-2hyyp-z73dr-iy7yd-4j2wl-lae\", daku_count: 129, gg_count: 0, total_count: 129, already_in_canister: false },\n  { principal: \"ld5uj-tgxfi-jgmdx-ikekg-uu62k-dhhrf-s6jav-3sdbh-4yamx-yzwrs-pqe\", daku_count: 299, gg_count: 2372, total_count: 2671, already_in_canister: false }\n];\n\n// Generate mock user stats based on holder data\nconst generateUserStats = (holders) => {\n  const now = Date.now() * 1000000; // Convert to nanoseconds\n  const oneDay = 24 * 60 * 60 * 1000000000; // 1 day in nanoseconds\n  \n  return holders.map(holder => {\n    const nftCount = holder.total_count;\n    const totalValue = nftCount * NFT_VALUE;\n    const annualPayout = (totalValue * APY_PERCENT) / 100;\n    const payoutPerPeriod = annualPayout / PAYOUTS_PER_YEAR;\n    \n    // Generate different payout times\n    const lastPayoutTime = now - Math.floor(Math.random() * oneDay * 5);\n    \n    return {\n      principal: holder.principal,\n      stats: {\n        last_payout_time: lastPayoutTime,\n        nft_count: BigInt(nftCount),\n        last_payout_amount: BigInt(Math.floor(payoutPerPeriod)),\n        total_payouts_received: BigInt(Math.floor(payoutPerPeriod * (1 + Math.random() * 10))),\n      }\n    };\n  });\n};\n\n// Generate mock global stats\nconst generateGlobalStats = (holders) => {\n  const now = Date.now() * 1000000; // Convert to nanoseconds\n  const fiveDays = 5 * 24 * 60 * 60 * 1000000000; // 5 days in nanoseconds\n  \n  const totalNFTs = holders.reduce((sum, holder) => sum + holder.total_count, 0);\n  const totalValue = totalNFTs * NFT_VALUE;\n  const annualPayout = (totalValue * APY_PERCENT) / 100;\n  const payoutPerPeriod = annualPayout / PAYOUTS_PER_YEAR;\n  \n  return {\n    last_payout_time: now - (2 * 24 * 60 * 60 * 1000000000), // 2 days ago\n    total_payouts_processed: BigInt(10),\n    total_payout_amount: BigInt(Math.floor(payoutPerPeriod * 10)),\n    total_registered_users: BigInt(holders.length),\n    next_payout_time: now + (3 * 24 * 60 * 60 * 1000000000), // 3 days from now\n    is_processing: false,\n    failed_transfers: BigInt(2),\n  };\n};\n\n// Mock implementations for the canister methods\nexport const mockPayoutActor = () => {\n  const userStats = generateUserStats(holdersData);\n  const globalStats = generateGlobalStats(holdersData);\n  \n  return {\n    get_all_user_stats: async () => {\n      return userStats.map(user => [\n        { toText: () => user.principal },\n        user.stats\n      ]);\n    },\n    get_stats: async () => globalStats,\n    get_user_stats: async (principal) => {\n      const user = userStats.find(u => u.principal === principal.toText());\n      return user ? user.stats : null;\n    },\n    processPayouts: async () => {},\n    register: async () => {},\n  };\n};\n\nexport const mockWalletActor = () => {\n  return {\n    getNFTCount: async (principal) => {\n      const holder = holdersData.find(h => h.principal === principal.toText());\n      return holder ? BigInt(holder.total_count) : BigInt(0);\n    },\n    getBalance: async (principal) => {\n      // Generate a random balance between 0 and 100 ZOMBIE tokens\n      return BigInt(Math.floor(Math.random() * 100 * 100000000));\n    },\n  };\n}; ","import { Actor, HttpAgent } from \"@dfinity/agent\";\nimport { Principal } from \"@dfinity/principal\";\nimport { mockPayoutActor, mockWalletActor } from \"./mockData\";\n\nconst PAYOUT_CANISTER_ID = process.env.REACT_APP_PAYOUT_CANISTER_ID || \"zeqfj-qyaaa-aaaaf-qanua-cai\";\nconst WALLET_CANISTER_ID = process.env.REACT_APP_WALLET_CANISTER_ID || \"rce3q-iaaaa-aaaap-qpyfa-cai\";\nconst IC_HOST = process.env.REACT_APP_IC_HOST || \"https://ic0.app\";\nconst API_REQUEST_TIMEOUT = parseInt(process.env.REACT_APP_API_REQUEST_TIMEOUT) || 30000;\n\n// Flag to use mock data instead of actual canisters\nconst USE_MOCK_DATA = true;\n\n// Create an agent for IC mainnet with request throttling\nconst createAgent = () => {\n  const agent = new HttpAgent({\n    host: IC_HOST,\n    fetchOptions: {\n      timeout: API_REQUEST_TIMEOUT,\n    }\n  });\n\n  // Add simple request throttling\n  let lastRequestTime = 0;\n  const minRequestInterval = 100; // 100ms between requests\n\n  const originalTransform = agent.transform;\n  agent.transform = async (request) => {\n    const now = Date.now();\n    const timeSinceLastRequest = now - lastRequestTime;\n    \n    if (timeSinceLastRequest < minRequestInterval) {\n      await new Promise(resolve => setTimeout(resolve, minRequestInterval - timeSinceLastRequest));\n    }\n    \n    lastRequestTime = Date.now();\n    return originalTransform ? originalTransform(request) : request;\n  };\n\n  return agent;\n};\n\nconst agent = createAgent();\n\n// Error handling wrapper\nconst withErrorHandling = (fn) => async (...args) => {\n  try {\n    const result = await fn(...args);\n    return result;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error(error.message || 'An error occurred while processing your request');\n  }\n};\n\n// Payout canister interface\nconst payoutInterface = ({ IDL }) => {\n  const UserStats = IDL.Record({\n    'last_payout_time': IDL.Int,\n    'nft_count': IDL.Nat64,\n    'last_payout_amount': IDL.Nat64,\n    'total_payouts_received': IDL.Nat64,\n  });\n  const Stats = IDL.Record({\n    'last_payout_time': IDL.Int,\n    'total_payouts_processed': IDL.Nat64,\n    'total_payout_amount': IDL.Nat64,\n    'total_registered_users': IDL.Nat64,\n    'next_payout_time': IDL.Int,\n    'is_processing': IDL.Bool,\n    'failed_transfers': IDL.Nat64,\n  });\n  return IDL.Service({\n    'get_all_user_stats': IDL.Func(\n      [],\n      [IDL.Vec(IDL.Tuple(IDL.Principal, UserStats))],\n      ['query'],\n    ),\n    'get_stats': IDL.Func([], [Stats], ['query']),\n    'get_user_stats': IDL.Func([IDL.Principal], [UserStats], ['query']),\n    'processPayouts': IDL.Func([], [], []),\n    'register': IDL.Func([], [], []),\n  });\n};\n\n// Wallet canister interface\nconst walletInterface = ({ IDL }) => {\n  return IDL.Service({\n    'getNFTCount': IDL.Func([IDL.Principal], [IDL.Nat], ['query']),\n    'getBalance': IDL.Func([IDL.Principal], [IDL.Nat], ['query']),\n  });\n};\n\n// Create actors with error handling\nexport const createPayoutActor = () => {\n  if (USE_MOCK_DATA) {\n    return mockPayoutActor();\n  }\n\n  const actor = Actor.createActor(payoutInterface, {\n    agent,\n    canisterId: PAYOUT_CANISTER_ID,\n  });\n\n  return {\n    get_all_user_stats: withErrorHandling(actor.get_all_user_stats.bind(actor)),\n    get_stats: withErrorHandling(actor.get_stats.bind(actor)),\n    get_user_stats: withErrorHandling(actor.get_user_stats.bind(actor)),\n    processPayouts: withErrorHandling(actor.processPayouts.bind(actor)),\n    register: withErrorHandling(actor.register.bind(actor)),\n  };\n};\n\nexport const createWalletActor = () => {\n  if (USE_MOCK_DATA) {\n    return mockWalletActor();\n  }\n\n  const actor = Actor.createActor(walletInterface, {\n    agent,\n    canisterId: WALLET_CANISTER_ID,\n  });\n\n  return {\n    getNFTCount: withErrorHandling(actor.getNFTCount.bind(actor)),\n    getBalance: withErrorHandling(actor.getBalance.bind(actor)),\n  };\n};\n\n// Data formatting utilities\nexport const formatStats = (rawStats) => ({\n  totalStaked: Number(rawStats.total_registered_users),\n  totalRewards: Number(rawStats.total_payout_amount) / 100000000, // Convert e8s to ICP\n  lastPayoutTime: Number(rawStats.last_payout_time),\n  nextPayoutTime: Number(rawStats.next_payout_time),\n  totalPayoutsProcessed: Number(rawStats.total_payouts_processed),\n  failedTransfers: Number(rawStats.failed_transfers),\n  isProcessing: rawStats.is_processing\n});\n\nexport const formatUserStats = (rawStats) => ({\n  nftCount: Number(rawStats.nft_count),\n  lastPayoutAmount: Number(rawStats.last_payout_amount) / 100000000, // Convert e8s to ICP\n  lastPayoutTime: Number(rawStats.last_payout_time),\n  totalPayoutsReceived: Number(rawStats.total_payouts_received) / 100000000 // Convert e8s to ICP\n}); ","import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { createPayoutActor, createWalletActor, formatStats, formatUserStats } from '../utils/agent';\n\n// Styled components\nconst DashboardContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: black;\n  color: #ffffff;\n  display: grid;\n  grid-template-columns: 350px 1fr 350px;\n  grid-template-rows: 80px 1fr 1fr 40px;\n  gap: 15px;\n  padding: 15px;\n  box-sizing: border-box;\n  overflow-x: hidden;\n  overflow-y: auto;\n  \n  @media (max-width: 1200px) {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto auto auto auto auto;\n    height: auto;\n    min-height: 100vh;\n  }\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: auto;\n    gap: 10px;\n    padding: 10px;\n  }\n`;\n\nconst Header = styled.header`\n  grid-column: 1 / -1;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  background: rgba(0, 31, 61, 0.3);\n  border: 1px solid rgba(0, 102, 204, 0.3);\n  border-radius: 4px;\n  box-shadow: 0 0 20px rgba(0, 102, 204, 0.1);\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    gap: 10px;\n    text-align: center;\n    padding: 15px;\n  }\n\n  h1 {\n    font-size: 1.5em;\n    color: #00ffff;\n    text-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\n    \n    @media (max-width: 768px) {\n      font-size: 1.2em;\n    }\n  }\n\n  div {\n    color: #00ffff;\n    font-size: 0.9em;\n  }\n`;\n\nconst Panel = styled.div`\n  background: rgba(0, 31, 61, 0.3);\n  border: 1px solid rgba(0, 102, 204, 0.3);\n  border-radius: 4px;\n  padding: 20px;\n  box-shadow: 0 0 20px rgba(0, 102, 204, 0.1);\n  overflow: auto;\n  \n  @media (max-width: 1200px) {\n    grid-column: span 1;\n  }\n  \n  @media (max-width: 768px) {\n    grid-column: 1;\n    padding: 15px;\n  }\n  \n  h2 {\n    color: #00ffff;\n    font-size: 1.2em;\n    margin-bottom: 15px;\n    text-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\n  }\n\n  div {\n    margin-bottom: 10px;\n    color: rgba(255, 255, 255, 0.8);\n  }\n  \n  table {\n    width: 100%;\n    border-collapse: collapse;\n    \n    @media (max-width: 768px) {\n      font-size: 0.9em;\n    }\n    \n    th, td {\n      padding: 8px 4px;\n      text-align: left;\n      \n      @media (max-width: 768px) {\n        padding: 6px 2px;\n      }\n    }\n  }\n`;\n\nconst CenterDisplay = styled.div`\n  grid-column: 2;\n  grid-row: 2 / -1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  gap: 20px;\n  \n  @media (max-width: 1200px) {\n    grid-column: span 2;\n    grid-row: auto;\n  }\n  \n  @media (max-width: 768px) {\n    grid-column: 1;\n    height: 60vh;\n    min-height: 400px;\n  }\n`;\n\nconst StatsCounter = styled.div`\n  position: absolute;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 36px;\n  font-weight: bold;\n  color: #00ffff;\n  text-shadow: 0 0 15px rgba(0, 255, 255, 0.5);\n  z-index: 1;\n  background: rgba(0, 11, 30, 0.7);\n  padding: 10px 20px;\n  border-radius: 4px;\n  border: 1px solid rgba(0, 102, 204, 0.3);\n  \n  @media (max-width: 768px) {\n    position: static;\n    transform: none;\n    font-size: 24px;\n    width: 100%;\n    text-align: center;\n    box-sizing: border-box;\n  }\n`;\n\nconst GlobeContainer = styled.div`\n  width: 100%;\n  height: 80%;\n  position: relative;\n  \n  @media (max-width: 768px) {\n    height: 100%;\n  }\n`;\n\nconst CountdownTimer = styled.div`\n  background: rgba(0, 31, 61, 0.5);\n  border: 1px solid rgba(0, 102, 204, 0.5);\n  border-radius: 4px;\n  padding: 15px 30px;\n  text-align: center;\n  width: fit-content;\n  margin: 0 auto;\n  \n  @media (max-width: 768px) {\n    padding: 10px 20px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n\n  .countdown-label {\n    color: #00ffff;\n    font-size: 1.1em;\n    margin-bottom: 8px;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    \n    @media (max-width: 768px) {\n      font-size: 1em;\n    }\n  }\n\n  .countdown-value {\n    font-size: 1.4em;\n    font-weight: bold;\n    color: #ffffff;\n    \n    @media (max-width: 768px) {\n      font-size: 1.2em;\n    }\n    \n    span {\n      background: rgba(0, 102, 204, 0.3);\n      padding: 6px 12px;\n      border-radius: 4px;\n      margin: 0 2px;\n      min-width: 40px;\n      display: inline-block;\n      \n      @media (max-width: 768px) {\n        padding: 4px 8px;\n        min-width: 30px;\n      }\n    }\n    \n    .separator {\n      color: #00ffff;\n      margin: 0 4px;\n    }\n  }\n`;\n\nconst WelcomeText = styled.div`\n  color: #00ffff;\n  font-size: 1.5em;\n  text-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\n  text-align: center;\n  margin-bottom: 20px;\n  \n  @media (max-width: 768px) {\n    font-size: 1.2em;\n    margin-bottom: 10px;\n  }\n`;\n\nconst Footer = styled.footer`\n  grid-column: 1 / -1;\n  text-align: center;\n  font-size: 0.8em;\n  color: rgba(255, 255, 255, 0.5);\n  padding: 10px;\n  \n  @media (max-width: 768px) {\n    padding: 5px;\n  }\n`;\n\nconst TestResultsPanel = styled(Panel)`\n  background: rgba(0, 41, 71, 0.4);\n  border: 1px solid rgba(0, 132, 234, 0.4);\n  \n  h3 {\n    color: #00ffff;\n    margin-bottom: 10px;\n    font-size: 1em;\n  }\n  \n  .test-category {\n    margin-bottom: 8px;\n    display: flex;\n    justify-content: space-between;\n  }\n  \n  .pass-rate {\n    color: #00ff99;\n    font-weight: bold;\n  }\n`;\n\n// Animated sphere component that uses the useFrame hook\nconst AnimatedSphere = () => {\n  const meshRef = useRef();\n\n  useFrame(() => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += 0.002;\n    }\n  });\n\n  return (\n    <mesh ref={meshRef}>\n      <sphereGeometry args={[2, 64, 64]} />\n      <meshStandardMaterial \n        color=\"#00ffff\"\n        metalness={0.2}\n        roughness={0.8}\n        wireframe={true}\n        opacity={0.8}\n        transparent={true}\n      />\n    </mesh>\n  );\n};\n\n// 3D Globe component wrapper\nconst Globe = () => {\n  return (\n    <Canvas camera={{ position: [0, 0, 5] }}>\n      <ambientLight intensity={0.3} />\n      <pointLight position={[10, 10, 10]} intensity={1.5} color=\"#00ffff\" />\n      <pointLight position={[-10, -10, -10]} intensity={0.5} color=\"#0066cc\" />\n      <AnimatedSphere />\n      <OrbitControls \n        enableZoom={true}\n        minDistance={3}\n        maxDistance={8}\n        autoRotate\n        autoRotateSpeed={0.5}\n      />\n    </Canvas>\n  );\n};\n\nconst Dashboard = () => {\n  const [stats, setStats] = useState({\n    totalStaked: 0,\n    totalRewards: 0,\n    activeStakers: 0,\n    averageStake: 0,\n    lastPayoutTime: 0,\n    nextPayoutTime: 0,\n    isProcessing: false\n  });\n\n  const [rewardsHistory, setRewardsHistory] = useState([]);\n  const [topStakers, setTopStakers] = useState([]);\n  const [distributionData, setDistributionData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [nextUpdate, setNextUpdate] = useState(null);\n  const [countdown, setCountdown] = useState({ hours: '00', minutes: '00' });\n  const [showTestResults, setShowTestResults] = useState(false);\n  const testResultsData = {\n    dataRetrieval: \"5/5\",\n    rewardCalculation: \"10/10\",\n    rewardDelivery: \"11/11\",\n    overallSuccess: \"100%\",\n    processingTime: \"0.24s\",\n    successRate: \"96%\"\n  };\n\n  useEffect(() => {\n    const fetchRewardsData = async () => {\n      try {\n        setLoading(true);\n        const payoutActor = createPayoutActor();\n        const walletActor = createWalletActor();\n        \n        // Fetch global stats\n        const globalStats = await payoutActor.get_stats();\n        const formattedStats = formatStats(globalStats);\n        \n        // Fetch all user stats\n        const allUserStats = await payoutActor.get_all_user_stats();\n        const userStatsArray = await Promise.all(\n          allUserStats.map(async ([principal, stats]) => {\n            const nftCount = await walletActor.getNFTCount(principal);\n            return {\n              principal: principal.toText(),\n              ...formatUserStats(stats),\n              currentNFTs: Number(nftCount)\n            };\n          })\n        );\n\n        // Calculate distribution data\n        const distribution = calculateDistribution(userStatsArray);\n        setDistributionData(distribution);\n\n        // Sort and set top stakers\n        const sortedStakers = userStatsArray\n          .sort((a, b) => b.currentNFTs - a.currentNFTs)\n          .slice(0, 5)\n          .map((staker, index) => ({\n            rank: index + 1,\n            address: `${staker.principal.slice(0, 5)}...${staker.principal.slice(-4)}`,\n            amount: staker.currentNFTs,\n            rewardRate: ((staker.totalPayoutsReceived / staker.currentNFTs) * 100).toFixed(2) + '%'\n          }));\n        setTopStakers(sortedStakers);\n\n        // Generate rewards history\n        const history = generateRewardsHistory(userStatsArray);\n        setRewardsHistory(history);\n\n        setStats({\n          ...formattedStats,\n          activeStakers: userStatsArray.length,\n          averageStake: userStatsArray.reduce((acc, curr) => acc + curr.currentNFTs, 0) / userStatsArray.length\n        });\n\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching rewards data:', err);\n        setError('Failed to fetch rewards data. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const calculateNextUpdate = () => {\n      const now = new Date();\n      const noon = new Date(now);\n      const midnight = new Date(now);\n      \n      noon.setHours(12, 0, 0, 0);\n      midnight.setHours(0, 0, 0, 0);\n      \n      if (now.getHours() >= 12) {\n        // If it's past noon, target midnight of next day\n        midnight.setDate(midnight.getDate() + 1);\n        setNextUpdate(midnight);\n        return midnight.getTime() - now.getTime();\n      } else if (now.getHours() >= 0) {\n        // If it's past midnight but before noon, target noon\n        setNextUpdate(noon);\n        return noon.getTime() - now.getTime();\n      }\n    };\n\n    // Update countdown every minute\n    const updateCountdown = () => {\n      if (nextUpdate) {\n        const now = new Date();\n        const diff = nextUpdate.getTime() - now.getTime();\n        \n        if (diff > 0) {\n          const hours = Math.floor(diff / (1000 * 60 * 60));\n          const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n          \n          setCountdown({\n            hours: hours.toString().padStart(2, '0'),\n            minutes: minutes.toString().padStart(2, '0')\n          });\n        }\n      }\n    };\n\n    // Initial fetch and countdown setup\n    fetchRewardsData();\n    const timeUntilNextUpdate = calculateNextUpdate();\n    updateCountdown();\n\n    // Update countdown every minute\n    const countdownInterval = setInterval(updateCountdown, 60000);\n\n    // Schedule next data fetch\n    const fetchTimeout = setTimeout(() => {\n      fetchRewardsData();\n      calculateNextUpdate();\n    }, timeUntilNextUpdate);\n\n    // Cleanup\n    return () => {\n      clearTimeout(fetchTimeout);\n      clearInterval(countdownInterval);\n    };\n  }, []); // Empty dependency array since we handle updates internally\n\n  const calculateDistribution = (userStats) => {\n    const ranges = [\n      { name: '1-10 NFTs', min: 1, max: 10 },\n      { name: '11-50 NFTs', min: 11, max: 50 },\n      { name: '51-100 NFTs', min: 51, max: 100 },\n      { name: '100+ NFTs', min: 101, max: Infinity }\n    ];\n\n    return ranges.map(range => {\n      const count = userStats.filter(user => \n        user.currentNFTs >= range.min && user.currentNFTs <= range.max\n      ).length;\n      return {\n        name: range.name,\n        value: (count / userStats.length * 100).toFixed(1)\n      };\n    });\n  };\n\n  const generateRewardsHistory = (userStats) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n    const currentMonth = new Date().getMonth();\n    \n    return months.map((month, index) => {\n      const monthIndex = (currentMonth - 5 + index + 12) % 12;\n      const value = userStats.reduce((acc, user) => acc + user.currentNFTs, 0);\n      return {\n        month: `${month} ${new Date().getFullYear()}`,\n        value: value\n      };\n    });\n  };\n\n  return (\n    <DashboardContainer>\n      <Header>\n        <h1>World 8 Staking Dashboard</h1>\n        <div>\n          <span>Last Update: {new Date().toLocaleString()}</span>\n          <button \n            style={{\n              marginLeft: '10px',\n              background: 'rgba(0, 102, 204, 0.3)',\n              color: '#00ffff',\n              border: '1px solid rgba(0, 102, 204, 0.5)',\n              borderRadius: '4px',\n              padding: '5px 10px',\n              cursor: 'pointer'\n            }}\n            onClick={() => setShowTestResults(!showTestResults)}\n          >\n            {showTestResults ? 'Hide Test Results' : 'Show Test Results'}\n          </button>\n        </div>\n      </Header>\n\n      <Panel>\n        <h2>Rewards Overview</h2>\n        <StatsCounter style={{ position: 'static', transform: 'none' }}>\n          {stats.totalStaked.toLocaleString()} NFTs\n        </StatsCounter>\n        <div style={{ marginTop: '20px' }}>\n          <h3 style={{ color: '#00ffff', marginBottom: '10px' }}>Key Metrics</h3>\n          <div style={{ color: 'rgba(255,255,255,0.8)' }}>\n            <div>Total Rewards: {stats.totalRewards.toLocaleString()} Zombie</div>\n            <div>Active Stakers: {stats.activeStakers.toLocaleString()}</div>\n            <div>Average Stake: {stats.averageStake.toFixed(2)} NFTs</div>\n          </div>\n        </div>\n      </Panel>\n\n      <CenterDisplay>\n        <WelcomeText>Welcome to WORLD 8 Rewards</WelcomeText>\n        <CountdownTimer>\n          <div className=\"countdown-label\">Next Update In</div>\n          <div className=\"countdown-value\">\n            <span>{countdown.hours}</span>\n            <span className=\"separator\">:</span>\n            <span>{countdown.minutes}</span>\n          </div>\n        </CountdownTimer>\n        <GlobeContainer>\n          <Globe />\n        </GlobeContainer>\n      </CenterDisplay>\n\n      <Panel>\n        <h2>Rewards History</h2>\n        <div style={{ width: '100%', height: '200px' }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={rewardsHistory}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n              <XAxis dataKey=\"month\" stroke=\"#00ffff\" />\n              <YAxis stroke=\"#00ffff\" />\n              <Tooltip \n                contentStyle={{ \n                  background: 'rgba(0,31,61,0.9)', \n                  border: '1px solid #00ffff',\n                  color: '#00ffff'\n                }}\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"value\" \n                name=\"Total Staked\"\n                stroke=\"#00ffff\"\n                strokeWidth={2}\n                dot={{ fill: '#00ffff' }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </Panel>\n\n      <Panel>\n        <h2>Top Stakers</h2>\n        <div className=\"responsive-table\" style={{ overflowX: 'auto' }}>\n          <table style={{ width: '100%', color: 'rgba(255,255,255,0.8)' }}>\n            <thead>\n              <tr style={{ color: '#00ffff' }}>\n                <th>Rank</th>\n                <th>Address</th>\n                <th>NFTs</th>\n                <th>Rewards Rate</th>\n              </tr>\n            </thead>\n            <tbody>\n              {topStakers.map((staker) => (\n                <tr key={staker.rank}>\n                  <td>#{staker.rank}</td>\n                  <td>{staker.address}</td>\n                  <td>{staker.amount.toLocaleString()}</td>\n                  <td>{staker.rewardRate}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Panel>\n\n      <Panel>\n        <h2>NFT Distribution</h2>\n        <div className=\"responsive-table\" style={{ overflowX: 'auto' }}>\n          <table style={{ width: '100%', color: 'rgba(255,255,255,0.8)' }}>\n            <thead>\n              <tr style={{ color: '#00ffff' }}>\n                <th>Range</th>\n                <th>Percentage</th>\n                <th>Stakers</th>\n              </tr>\n            </thead>\n            <tbody>\n              {distributionData.map((item, index) => (\n                <tr key={index}>\n                  <td>{item.name}</td>\n                  <td>{item.value}%</td>\n                  <td>{Math.floor(stats.activeStakers * (parseFloat(item.value) / 100))}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Panel>\n\n      {showTestResults && (\n        <TestResultsPanel style={{ gridColumn: '1 / -1', marginTop: '15px' }}>\n          <h2>Latest System Test Results</h2>\n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '15px' }}>\n            <div>\n              <h3>Functional Tests</h3>\n              <div className=\"test-category\">\n                <span>Data Retrieval:</span>\n                <span className=\"pass-rate\">{testResultsData.dataRetrieval}</span>\n              </div>\n              <div className=\"test-category\">\n                <span>Reward Calculation:</span>\n                <span className=\"pass-rate\">{testResultsData.rewardCalculation}</span>\n              </div>\n              <div className=\"test-category\">\n                <span>Reward Delivery:</span>\n                <span className=\"pass-rate\">{testResultsData.rewardDelivery}</span>\n              </div>\n            </div>\n            \n            <div>\n              <h3>Performance Metrics</h3>\n              <div className=\"test-category\">\n                <span>Processing Time per Holder:</span>\n                <span className=\"pass-rate\">{testResultsData.processingTime}</span>\n              </div>\n              <div className=\"test-category\">\n                <span>Transaction Success Rate:</span>\n                <span className=\"pass-rate\">{testResultsData.successRate}</span>\n              </div>\n              <div className=\"test-category\">\n                <span>Overall Test Success:</span>\n                <span className=\"pass-rate\">{testResultsData.overallSuccess}</span>\n              </div>\n            </div>\n          </div>\n          <div style={{ marginTop: '10px', fontSize: '0.9em', color: 'rgba(255, 255, 255, 0.7)' }}>\n            Last test run: March 28, 2024 - All test categories passing with robust error recovery\n          </div>\n        </TestResultsPanel>\n      )}\n      \n      <Footer>\n        World 8 Staking System &copy; 2024 - v2.1.0 - Updated with latest test results\n      </Footer>\n    </DashboardContainer>\n  );\n};\n\nexport default Dashboard; ","import React from 'react';\nimport Dashboard from './components/Dashboard';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: #000B1E;\n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n\n  @media (max-width: 768px) {\n    html, body {\n      height: auto;\n      width: 100%;\n      overflow-x: hidden;\n    }\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Dashboard />\n    </>\n  );\n}\n\nexport default App; ","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"names":["holdersData","principal","daku_count","gg_count","total_count","already_in_canister","mockPayoutActor","userStats","holders","now","Date","map","holder","nftCount","payoutPerPeriod","lastPayoutTime","Math","floor","random","stats","last_payout_time","nft_count","BigInt","last_payout_amount","total_payouts_received","generateUserStats","globalStats","reduce","sum","total_payouts_processed","total_payout_amount","total_registered_users","length","next_payout_time","is_processing","failed_transfers","generateGlobalStats","get_all_user_stats","async","user","toText","get_stats","get_user_stats","find","u","processPayouts","register","IC_HOST","process","REACT_APP_IC_HOST","API_REQUEST_TIMEOUT","parseInt","REACT_APP_API_REQUEST_TIMEOUT","createWalletActor","createAgent","agent","HttpAgent","host","fetchOptions","timeout","lastRequestTime","originalTransform","transform","timeSinceLastRequest","Promise","resolve","setTimeout","request","getNFTCount","h","getBalance","formatUserStats","rawStats","Number","lastPayoutAmount","totalPayoutsReceived","DashboardContainer","styled","div","Header","header","Panel","CenterDisplay","StatsCounter","GlobeContainer","CountdownTimer","WelcomeText","Footer","footer","TestResultsPanel","AnimatedSphere","meshRef","useRef","useFrame","current","rotation","y","React","ref","args","color","metalness","roughness","wireframe","opacity","transparent","Globe","Canvas","camera","position","intensity","OrbitControls","enableZoom","minDistance","maxDistance","autoRotate","autoRotateSpeed","Dashboard","setStats","useState","totalStaked","totalRewards","activeStakers","averageStake","nextPayoutTime","isProcessing","rewardsHistory","setRewardsHistory","topStakers","setTopStakers","distributionData","setDistributionData","loading","setLoading","error","setError","nextUpdate","setNextUpdate","countdown","setCountdown","hours","minutes","showTestResults","setShowTestResults","testResultsData","useEffect","fetchRewardsData","payoutActor","walletActor","formattedStats","totalPayoutsProcessed","failedTransfers","allUserStats","userStatsArray","all","_ref","currentNFTs","distribution","calculateDistribution","sortedStakers","sort","a","b","slice","staker","index","rank","address","amount","rewardRate","toFixed","history","generateRewardsHistory","acc","curr","err","console","calculateNextUpdate","noon","midnight","setHours","getHours","setDate","getDate","getTime","updateCountdown","diff","toString","padStart","timeUntilNextUpdate","countdownInterval","setInterval","fetchTimeout","clearTimeout","clearInterval","name","min","max","Infinity","range","count","filter","value","getMonth","month","getFullYear","toLocaleString","style","marginLeft","background","border","borderRadius","padding","cursor","onClick","marginTop","marginBottom","className","width","height","ResponsiveContainer","LineChart","data","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","YAxis","Tooltip","contentStyle","Line","type","strokeWidth","dot","fill","overflowX","key","item","parseFloat","gridColumn","display","gridTemplateColumns","gap","fontSize","GlobalStyle","createGlobalStyle","container","document","getElementById","createRoot","render","App"],"sourceRoot":""}